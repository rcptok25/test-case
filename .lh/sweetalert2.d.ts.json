{
    "sourceFile": "sweetalert2.d.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1661880509072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1661880509072,
            "name": "Commit-0",
            "content": "declare module 'sweetalert2' {\r\n    /**\r\n     * A namespace inside the default function, containing utility function for controlling the currently-displayed popup.\r\n     *\r\n     * Example:\r\n     * ```\r\n     * Swal.fire('Hey user!', 'You are the rockstar!', 'info');\r\n     *\r\n     * Swal.update({\r\n     *   icon: 'success'\r\n     * })\r\n     * ```\r\n     */\r\n    namespace Swal {\r\n      /**\r\n       * Function to display a SweetAlert2 popup, with an object of options, all being optional.\r\n       * See the `SweetAlertOptions` interface for the list of accepted fields and values.\r\n       *\r\n       * Example:\r\n       * ```\r\n       * Swal.fire({\r\n       *   title: 'Auto close alert!',\r\n       *   text: 'I will close in 2 seconds.',\r\n       *   timer: 2000\r\n       * })\r\n       * ```\r\n       */\r\n      function fire<T = any>(options: SweetAlertOptions<T>): Promise<SweetAlertResult<Awaited<T>>>\r\n  \r\n      /**\r\n       * Function to display a simple SweetAlert2 popup.\r\n       *\r\n       * Example:\r\n       * ```\r\n       * Swal.fire('The Internet?', 'That thing is still around?', 'question');\r\n       * ```\r\n       */\r\n      function fire<T = any>(title?: string, html?: string, icon?: SweetAlertIcon): Promise<SweetAlertResult<Awaited<T>>>\r\n  \r\n      /**\r\n       * Reuse configuration by creating a `Swal` instance.\r\n       *\r\n       * Example:\r\n       * ```\r\n       * const Toast = Swal.mixin({\r\n       *   toast: true,\r\n       *   position: 'top-end',\r\n       *   timer: 3000,\r\n       *   timerProgressBar: true\r\n       * })\r\n       * Toast.fire('Something interesting happened', '', 'info')\r\n       * ```\r\n       *\r\n       * @param options the default options to set for this instance.\r\n       */\r\n      function mixin(options: SweetAlertOptions): typeof Swal\r\n  \r\n      /**\r\n       * Determines if a popup is shown.\r\n       */\r\n      function isVisible(): boolean\r\n  \r\n      /**\r\n       * Updates popup options.\r\n       * See the `SweetAlertOptions` interface for the list of accepted fields and values.\r\n       *\r\n       * Example:\r\n       * ```\r\n       * Swal.update({\r\n       *   icon: 'error'\r\n       * })\r\n       * ```\r\n       */\r\n      function update(options: Pick<SweetAlertOptions, SweetAlertUpdatableParameters>): void\r\n  \r\n      /**\r\n       * Closes the currently open SweetAlert2 popup programmatically.\r\n       *\r\n       * @param result The promise originally returned by `Swal.fire()` will be resolved with this value.\r\n       * If no object is given, the promise is resolved with an empty `SweetAlertResult` object.\r\n       */\r\n      function close(result?: Partial<SweetAlertResult>): void\r\n  \r\n      /**\r\n       * Gets the popup container which contains the backdrop and the popup itself.\r\n       */\r\n      function getContainer(): HTMLElement | null\r\n  \r\n      /**\r\n       * Gets the popup.\r\n       */\r\n      function getPopup(): HTMLElement | null\r\n  \r\n      /**\r\n       * Gets the popup title.\r\n       */\r\n      function getTitle(): HTMLElement | null\r\n  \r\n      /**\r\n       * Gets progress steps.\r\n       */\r\n      function getProgressSteps(): HTMLElement | null\r\n  \r\n      /**\r\n       * Gets the DOM element where the `html`/`text` parameter is rendered to.\r\n       */\r\n      function getHtmlContainer(): HTMLElement | null\r\n  \r\n      /**\r\n       * Gets the image.\r\n       */\r\n      function getImage(): HTMLElement | null\r\n  \r\n      /**\r\n       * Gets the close button.\r\n       */\r\n      function getCloseButton(): HTMLButtonElement | null\r\n  \r\n      /**\r\n       * Gets the icon.\r\n       */\r\n      function getIcon(): HTMLElement | null\r\n  \r\n      /**\r\n       * Gets the \"Confirm\" button.\r\n       */\r\n      function getConfirmButton(): HTMLButtonElement | null\r\n  \r\n      /**\r\n       * Gets the \"Deny\" button.\r\n       */\r\n      function getDenyButton(): HTMLButtonElement | null\r\n  \r\n      /**\r\n       * Gets the \"Cancel\" button.\r\n       */\r\n      function getCancelButton(): HTMLButtonElement | null\r\n  \r\n      /**\r\n       * Gets actions (buttons) wrapper.\r\n       */\r\n      function getActions(): HTMLElement | null\r\n  \r\n      /**\r\n       * Gets the popup footer.\r\n       */\r\n      function getFooter(): HTMLElement | null\r\n  \r\n      /**\r\n       * Gets the timer progress bar (see the `timerProgressBar` param).\r\n       */\r\n      function getTimerProgressBar(): HTMLElement | null\r\n  \r\n      /**\r\n       * Gets all focusable elements in the popup.\r\n       */\r\n      function getFocusableElements(): readonly HTMLElement[]\r\n  \r\n      /**\r\n       * Enables \"Confirm\" and \"Cancel\" buttons.\r\n       */\r\n      function enableButtons(): void\r\n  \r\n      /**\r\n       * Disables \"Confirm\" and \"Cancel\" buttons.\r\n       */\r\n      function disableButtons(): void\r\n  \r\n      /**\r\n       * Shows loader (spinner), this is useful with AJAX requests.\r\n       *\r\n       * By default the loader be shown instead of the \"Confirm\" button, but if you want\r\n       * another button to be replaced with a loader, just pass it like this:\r\n       * ```\r\n       * Swal.showLoading(Swal.getDenyButton())\r\n       * ```\r\n       */\r\n      function showLoading(buttonToReplace?: HTMLButtonElement): void\r\n  \r\n      /**\r\n       * Hides loader and shows back the button which was hidden by .showLoading()\r\n       */\r\n      function hideLoading(): void\r\n  \r\n      /**\r\n       * Determines if popup is in the loading state.\r\n       */\r\n      function isLoading(): boolean\r\n  \r\n      /**\r\n       * Clicks the \"Confirm\" button programmatically.\r\n       */\r\n      function clickConfirm(): void\r\n  \r\n      /**\r\n       * Clicks the \"Deny\" button programmatically.\r\n       */\r\n      function clickDeny(): void\r\n  \r\n      /**\r\n       * Clicks the \"Cancel\" button programmatically.\r\n       */\r\n      function clickCancel(): void\r\n  \r\n      /**\r\n       * Shows a validation message.\r\n       *\r\n       * @param validationMessage The validation message.\r\n       */\r\n      function showValidationMessage(validationMessage: string): void\r\n  \r\n      /**\r\n       * Hides validation message.\r\n       */\r\n      function resetValidationMessage(): void\r\n  \r\n      /**\r\n       * Gets the input DOM node, this method works with input parameter.\r\n       */\r\n      function getInput(): HTMLInputElement | null\r\n  \r\n      /**\r\n       * Disables the popup input. A disabled input element is unusable and un-clickable.\r\n       */\r\n      function disableInput(): void\r\n  \r\n      /**\r\n       * Enables the popup input.\r\n       */\r\n      function enableInput(): void\r\n  \r\n      /**\r\n       * Gets the validation message container.\r\n       */\r\n      function getValidationMessage(): HTMLElement | null\r\n  \r\n      /**\r\n       * If `timer` parameter is set, returns number of milliseconds of timer remained.\r\n       * Otherwise, returns undefined.\r\n       */\r\n      function getTimerLeft(): number | undefined\r\n  \r\n      /**\r\n       * Stop timer. Returns number of milliseconds of timer remained.\r\n       * If `timer` parameter isn't set, returns `undefined`.\r\n       */\r\n      function stopTimer(): number | undefined\r\n  \r\n      /**\r\n       * Resume timer. Returns number of milliseconds of timer remained.\r\n       * If `timer` parameter isn't set, returns `undefined`.\r\n       */\r\n      function resumeTimer(): number | undefined\r\n  \r\n      /**\r\n       * Toggle timer. Returns number of milliseconds of timer remained.\r\n       * If `timer` parameter isn't set, returns `undefined`.\r\n       */\r\n      function toggleTimer(): number | undefined\r\n  \r\n      /**\r\n       * Check if timer is running. Returns true if timer is running,\r\n       * and false is timer is paused / stopped.\r\n       * If `timer` parameter isn't set, returns `undefined`.\r\n       */\r\n      function isTimerRunning(): boolean | undefined\r\n  \r\n      /**\r\n       * Increase timer. Returns number of milliseconds of an updated timer.\r\n       * If `timer` parameter isn't set, returns `undefined`.\r\n       *\r\n       * @param n The number of milliseconds to add to the currect timer\r\n       */\r\n      function increaseTimer(n: number): number | undefined\r\n  \r\n      /**\r\n       * Determines if a given parameter name is valid.\r\n       *\r\n       * @param paramName The parameter to check\r\n       */\r\n      function isValidParameter(paramName: string): paramName is keyof SweetAlertOptions\r\n  \r\n      /**\r\n       * Determines if a given parameter name is valid for `Swal.update()` method.\r\n       *\r\n       * @param paramName The parameter to check\r\n       */\r\n      function isUpdatableParameter(paramName: string): paramName is SweetAlertUpdatableParameters\r\n  \r\n      /**\r\n       * Normalizes the arguments you can give to Swal.fire() in an object of type SweetAlertOptions.\r\n       *\r\n       * Example:\r\n       * ```\r\n       * Swal.argsToParams(['title', 'text']); //=> { title: 'title', text: 'text' }\r\n       * Swal.argsToParams([{ title: 'title', text: 'text' }]); //=> { title: 'title', text: 'text' }\r\n       * ```\r\n       *\r\n       * @param params The array of arguments to normalize.\r\n       */\r\n      function argsToParams<T>(params: SweetAlertArrayOptions | readonly [SweetAlertOptions<T>]): SweetAlertOptions<T>\r\n  \r\n      /**\r\n       * An enum of possible reasons that can explain an alert dismissal.\r\n       */\r\n      enum DismissReason {\r\n        cancel,\r\n        backdrop,\r\n        close,\r\n        esc,\r\n        timer,\r\n      }\r\n  \r\n      /**\r\n       * SweetAlert2's version\r\n       */\r\n      const version: string\r\n    }\r\n  \r\n    interface SweetAlertHideShowClass {\r\n      backdrop?: string | readonly string[]\r\n      icon?: string | readonly string[]\r\n      popup?: string | readonly string[]\r\n    }\r\n  \r\n    type Awaited<T> = T extends Promise<infer U> ? U : T\r\n  \r\n    type SyncOrAsync<T> = T | Promise<T> | { toPromise: () => T }\r\n  \r\n    type ValueOrThunk<T> = T | (() => T)\r\n  \r\n    export type SweetAlertArrayOptions = readonly [string?, string?, SweetAlertIcon?]\r\n  \r\n    export type SweetAlertGrow = 'row' | 'column' | 'fullscreen' | false\r\n  \r\n    export type SweetAlertHideClass = SweetAlertHideShowClass\r\n  \r\n    export type SweetAlertShowClass = Readonly<SweetAlertHideShowClass>\r\n  \r\n    export type SweetAlertIcon = 'success' | 'error' | 'warning' | 'info' | 'question'\r\n  \r\n    export type SweetAlertInput =\r\n      | 'text'\r\n      | 'email'\r\n      | 'password'\r\n      | 'number'\r\n      | 'tel'\r\n      | 'range'\r\n      | 'textarea'\r\n      | 'select'\r\n      | 'radio'\r\n      | 'checkbox'\r\n      | 'file'\r\n      | 'url'\r\n  \r\n    export type SweetAlertPosition =\r\n      | 'top'\r\n      | 'top-start'\r\n      | 'top-end'\r\n      | 'top-left'\r\n      | 'top-right'\r\n      | 'center'\r\n      | 'center-start'\r\n      | 'center-end'\r\n      | 'center-left'\r\n      | 'center-right'\r\n      | 'bottom'\r\n      | 'bottom-start'\r\n      | 'bottom-end'\r\n      | 'bottom-left'\r\n      | 'bottom-right'\r\n  \r\n    export type SweetAlertUpdatableParameters =\r\n      | 'allowEscapeKey'\r\n      | 'allowOutsideClick'\r\n      | 'background'\r\n      | 'buttonsStyling'\r\n      | 'cancelButtonAriaLabel'\r\n      | 'cancelButtonColor'\r\n      | 'cancelButtonText'\r\n      | 'closeButtonAriaLabel'\r\n      | 'closeButtonHtml'\r\n      | 'confirmButtonAriaLabel'\r\n      | 'confirmButtonColor'\r\n      | 'confirmButtonText'\r\n      | 'currentProgressStep'\r\n      | 'customClass'\r\n      | 'denyButtonAriaLabel'\r\n      | 'denyButtonColor'\r\n      | 'denyButtonText'\r\n      | 'didClose'\r\n      | 'didDestroy'\r\n      | 'footer'\r\n      | 'hideClass'\r\n      | 'html'\r\n      | 'icon'\r\n      | 'iconColor'\r\n      | 'imageAlt'\r\n      | 'imageHeight'\r\n      | 'imageUrl'\r\n      | 'imageWidth'\r\n      | 'preConfirm'\r\n      | 'preDeny'\r\n      | 'progressSteps'\r\n      | 'reverseButtons'\r\n      | 'showCancelButton'\r\n      | 'showCloseButton'\r\n      | 'showConfirmButton'\r\n      | 'showDenyButton'\r\n      | 'text'\r\n      | 'title'\r\n      | 'titleText'\r\n      | 'willClose'\r\n  \r\n    export interface SweetAlertCustomClass {\r\n      container?: string | readonly string[]\r\n      popup?: string | readonly string[]\r\n      title?: string | readonly string[]\r\n      closeButton?: string | readonly string[]\r\n      icon?: string | readonly string[]\r\n      image?: string | readonly string[]\r\n      htmlContainer?: string | readonly string[]\r\n      input?: string | readonly string[]\r\n      inputLabel?: string | readonly string[]\r\n      validationMessage?: string | readonly string[]\r\n      actions?: string | readonly string[]\r\n      confirmButton?: string | readonly string[]\r\n      denyButton?: string | readonly string[]\r\n      cancelButton?: string | readonly string[]\r\n      loader?: string | readonly string[]\r\n      footer?: string | readonly string[]\r\n      timerProgressBar?: string | readonly string[]\r\n    }\r\n  \r\n    export interface SweetAlertResult<T = any> {\r\n      readonly isConfirmed: boolean\r\n      readonly isDenied: boolean\r\n      readonly isDismissed: boolean\r\n      readonly value?: T\r\n      readonly dismiss?: Swal.DismissReason\r\n    }\r\n  \r\n    export interface SweetAlertOptions<PreConfirmResult = any, PreConfirmCallbackValue = any> {\r\n      /**\r\n       * The title of the popup, as HTML.\r\n       * It can either be added to the object under the key `title` or passed as the first parameter of `Swal.fire()`.\r\n       *\r\n       * @default ''\r\n       */\r\n      title?: string | HTMLElement | JQuery\r\n  \r\n      /**\r\n       * The title of the popup, as text. Useful to avoid HTML injection.\r\n       *\r\n       * @default ''\r\n       */\r\n      titleText?: string\r\n  \r\n      /**\r\n       * A description for the popup.\r\n       * If `text` and `html` parameters are provided in the same time, `html` will be used.\r\n       *\r\n       * @default ''\r\n       */\r\n      text?: string\r\n  \r\n      /**\r\n       * A HTML description for the popup.\r\n       * If `text` and `html` parameters are provided in the same time, `html` will be used.\r\n       *\r\n       * [Security] SweetAlert2 does NOT sanitize this parameter. It is the developer's responsibility\r\n       * to escape any user input when using the `html` option, so XSS attacks would be prevented.\r\n       *\r\n       * @default ''\r\n       */\r\n      html?: string | HTMLElement | JQuery\r\n  \r\n      /**\r\n       * The icon of the popup.\r\n       * SweetAlert2 comes with 5 built-in icons which will show a corresponding icon animation:\r\n       * `'warning'`, `'error'`, `'success'`, `'info'` and `'question'`.\r\n       * It can either be put to the object under the key `icon` or passed as the third parameter of `Swal.fire()`.\r\n       *\r\n       * @default undefined\r\n       */\r\n      icon?: SweetAlertIcon\r\n  \r\n      /**\r\n       * Use this to change the color of the icon.\r\n       *\r\n       * @default undefined\r\n       */\r\n      iconColor?: string\r\n  \r\n      /**\r\n       * The custom HTML content for an icon.\r\n       *\r\n       * Example:\r\n       * ```\r\n       * Swal.fire({\r\n       *   icon: 'error',\r\n       *   iconHtml: '<i class=\"fas fa-bug\"></i>'\r\n       * })\r\n       * ```\r\n       *\r\n       * @default undefined\r\n       */\r\n      iconHtml?: string\r\n  \r\n      /**\r\n       * The footer of the popup, as HTML.\r\n       *\r\n       * @default ''\r\n       */\r\n      footer?: string | HTMLElement | JQuery\r\n  \r\n      /**\r\n       * The declarative <template> of the popup. All API prams can be set via\r\n       * `<swal-param name=\"...\" value=\"...\"></swal-param>`, e.g.\r\n       * `<swal-param name=\"toast\" value=\"true\"></swal-param>`\r\n       *\r\n       * Additionally, there are specialized elements for specific params:\r\n       *  - `<swal-title>`\r\n       *  - `<swal-html>`\r\n       *  - `<swal-icon>`\r\n       *  - `<swal-image>`\r\n       *  - `<swal-input>`\r\n       *  - `<swal-input-option>`\r\n       *  - `<swal-button>`\r\n       *  - `<swal-footer>`\r\n       *\r\n       * Example:\r\n       * ```html\r\n       * <template id=\"my-template\">\r\n       *   <swal-title>Are you sure?</swal-title>\r\n       *   <swal-html>You won't be able to revert this!</swal-html>\r\n       *\r\n       *   <swal-icon type=\"success\"></swal-icon>\r\n       *   <swal-image src=\"...\" width=\"...\" height=\"...\" alt=\"...\"></swal-image>\r\n       *\r\n       *   <swal-input type=\"select\" placeholder=\"...\" label=\"...\" value=\"...\">\r\n       *     <swal-input-option value=\"...\">...</swal-input-option>\r\n       *   </swal-input>\r\n       *   <swal-param name=\"inputAttributes\" value='{ \"multiple\": true }'></swal-param>\r\n       *\r\n       *   <swal-button type=\"confirm\" color=\"...\" aria-label=\"...\">Yes</swal-button>\r\n       *   <swal-button type=\"cancel\" color=\"...\" aria-label=\"...\">No</swal-button>\r\n       *\r\n       *   <swal-footer>read more here</swal-footer>\r\n       * </template>\r\n       * ```\r\n       *\r\n       * ```\r\n       * Swal.fire({\r\n       *   template: '#my-template'\r\n       * })\r\n       * ```\r\n       *\r\n       * @default undefined\r\n       */\r\n      template?: string | HTMLTemplateElement\r\n  \r\n      /**\r\n       * Whether or not SweetAlert2 should show a full screen click-to-dismiss backdrop.\r\n       * Either a boolean value or a css background value (hex, rgb, rgba, url, etc.)\r\n       *\r\n       * @default true\r\n       */\r\n      backdrop?: boolean | string\r\n  \r\n      /**\r\n       * Whether or not an alert should be treated as a toast notification.\r\n       * This option is normally coupled with the `position` and `timer` parameters.\r\n       * Toasts are NEVER autofocused.\r\n       *\r\n       * @default false\r\n       */\r\n      toast?: boolean\r\n  \r\n      /**\r\n       * The container element for adding popup into (query selector only).\r\n       *\r\n       * @default 'body'\r\n       */\r\n      target?: string | HTMLElement\r\n  \r\n      /**\r\n       * Input field type, can be `'text'`, `'email'`, `'password'`, `'number'`, `'tel'`, `'range'`, `'textarea'`,\r\n       * `'select'`, `'radio'`, `'checkbox'`, `'file'` and `'url'`.\r\n       *\r\n       * @default undefined\r\n       */\r\n      input?: SweetAlertInput\r\n  \r\n      /**\r\n       * Popup width, including paddings (`box-sizing: border-box`).\r\n       *\r\n       * @default undefined\r\n       */\r\n      width?: number | string\r\n  \r\n      /**\r\n       * Popup padding.\r\n       *\r\n       * @default undefined\r\n       */\r\n      padding?: number | string\r\n  \r\n      /**\r\n       * Color for title, content and footer (CSS `color` property).  The default color is `#545454`.\r\n       *\r\n       * @default undefined\r\n       */\r\n      color?: string\r\n  \r\n      /**\r\n       * Popup background (CSS `background` property). The default background is `#fff`.\r\n       *\r\n       * @default undefined\r\n       */\r\n      background?: string\r\n  \r\n      /**\r\n       * Popup position\r\n       *\r\n       * @default 'center'\r\n       */\r\n      position?: SweetAlertPosition\r\n  \r\n      /**\r\n       * Popup grow direction\r\n       *\r\n       * @default false\r\n       */\r\n      grow?: SweetAlertGrow\r\n  \r\n      /**\r\n       * CSS classes for animations when showing a popup (fade in)\r\n       *\r\n       * @default { popup: 'swal2-show', backdrop: 'swal2-backdrop-show', icon: 'swal2-icon-show' }\r\n       */\r\n      showClass?: SweetAlertShowClass\r\n  \r\n      /**\r\n       * CSS classes for animations when hiding a popup (fade out)\r\n       *\r\n       * @default { popup: 'swal2-hide', backdrop: 'swal2-backdrop-hide', icon: 'swal2-icon-hide' }\r\n       */\r\n      hideClass?: SweetAlertHideClass\r\n  \r\n      /**\r\n       * A custom CSS class for the popup.\r\n       * If a string value is provided, the classname will be applied to the popup.\r\n       * If an object is provided, the classnames will be applied to the corresponding fields:\r\n       *\r\n       * Example:\r\n       * ```\r\n       * Swal.fire({\r\n       *   customClass: {\r\n       *     container: '...',\r\n       *     popup: '...',\r\n       *     title: '...',\r\n       *     closeButton: '...',\r\n       *     icon: '...',\r\n       *     image: '...',\r\n       *     input: '...',\r\n       *     inputLabel: '...',\r\n       *     validationMessage: '...',\r\n       *     actions: '...',\r\n       *     confirmButton: '...',\r\n       *     denyButton: '...',\r\n       *     cancelButton: '...',\r\n       *     loader: '...',\r\n       *     footer: '...',\r\n       *     timerProgressBar: '...',\r\n       *   }\r\n       * })\r\n       * ```\r\n       *\r\n       * @default {}\r\n       */\r\n      customClass?: SweetAlertCustomClass | string\r\n  \r\n      /**\r\n       * Auto close timer of the popup. Set in ms (milliseconds).\r\n       *\r\n       * @default undefined\r\n       */\r\n      timer?: number\r\n  \r\n      /**\r\n       * If set to `true`, the timer will have a progress bar at the bottom of a popup.\r\n       * Mostly, this feature is useful with toasts.\r\n       *\r\n       * @default false\r\n       */\r\n      timerProgressBar?: boolean\r\n  \r\n      /**\r\n       * By default, SweetAlert2 sets html's and body's CSS `height` to `auto !important`.\r\n       * If this behavior isn't compatible with your project's layout, set `heightAuto` to `false`.\r\n       *\r\n       * @default true\r\n       */\r\n      heightAuto?: boolean\r\n  \r\n      /**\r\n       * If set to `false`, the user can't dismiss the popup by clicking outside it.\r\n       * You can also pass a custom function returning a boolean value, e.g. if you want\r\n       * to disable outside clicks for the loading state of a popup.\r\n       *\r\n       * @default true\r\n       */\r\n      allowOutsideClick?: ValueOrThunk<boolean>\r\n  \r\n      /**\r\n       * If set to `false`, the user can't dismiss the popup by pressing the Escape key.\r\n       * You can also pass a custom function returning a boolean value, e.g. if you want\r\n       * to disable the escape key for the loading state of a popup.\r\n       *\r\n       * @default true\r\n       */\r\n      allowEscapeKey?: ValueOrThunk<boolean>\r\n  \r\n      /**\r\n       * If set to `false`, the user can't confirm the popup by pressing the Enter or Space keys,\r\n       * unless they manually focus the confirm button.\r\n       * You can also pass a custom function returning a boolean value.\r\n       *\r\n       * @default true\r\n       */\r\n      allowEnterKey?: ValueOrThunk<boolean>\r\n  \r\n      /**\r\n       * If set to `false`, SweetAlert2 will allow keydown events propagation to the document.\r\n       *\r\n       * @default true\r\n       */\r\n      stopKeydownPropagation?: boolean\r\n  \r\n      /**\r\n       * Useful for those who are using SweetAlert2 along with Bootstrap modals.\r\n       * By default keydownListenerCapture is `false` which means when a user hits `Esc`,\r\n       * both SweetAlert2 and Bootstrap modals will be closed.\r\n       * Set `keydownListenerCapture` to `true` to fix that behavior.\r\n       *\r\n       * @default false\r\n       */\r\n      keydownListenerCapture?: boolean\r\n  \r\n      /**\r\n       * If set to `false`, the \"Confirm\" button will not be shown.\r\n       * It can be useful when you're using custom HTML description.\r\n       *\r\n       * @default true\r\n       */\r\n      showConfirmButton?: boolean\r\n  \r\n      /**\r\n       * If set to `true`, the \"Deny\" button will be shown, which the user can click on to deny the popup.\r\n       *\r\n       * @default false\r\n       */\r\n      showDenyButton?: boolean\r\n  \r\n      /**\r\n       * If set to `true`, the \"Cancel\" button will be shown, which the user can click on to dismiss the popup.\r\n       *\r\n       * @default false\r\n       */\r\n      showCancelButton?: boolean\r\n  \r\n      /**\r\n       * Use this to change the text on the \"Confirm\" button.\r\n       *\r\n       * @default 'OK'\r\n       */\r\n      confirmButtonText?: string\r\n  \r\n      /**\r\n       * Use this to change the text on the \"Confirm\" button.\r\n       *\r\n       * @default 'No'\r\n       */\r\n      denyButtonText?: string\r\n  \r\n      /**\r\n       * Use this to change the text on the \"Cancel\" button.\r\n       *\r\n       * @default 'Cancel'\r\n       */\r\n      cancelButtonText?: string\r\n  \r\n      /**\r\n       * Use this to change the background color of the \"Confirm\" button.\r\n       *\r\n       * @default undefined\r\n       */\r\n      confirmButtonColor?: string\r\n  \r\n      /**\r\n       * Use this to change the background color of the \"Deny\" button.\r\n       *\r\n       * @default undefined\r\n       */\r\n      denyButtonColor?: string\r\n  \r\n      /**\r\n       * Use this to change the background color of the \"Cancel\" button.\r\n       *\r\n       * @default undefined\r\n       */\r\n      cancelButtonColor?: string\r\n  \r\n      /**\r\n       * Use this to change the `aria-label` for the \"Confirm\" button.\r\n       *\r\n       * @default ''\r\n       */\r\n      confirmButtonAriaLabel?: string\r\n  \r\n      /**\r\n       * Use this to change the `aria-label` for the \"Deny\" button.\r\n       *\r\n       * @default ''\r\n       */\r\n      denyButtonAriaLabel?: string\r\n  \r\n      /**\r\n       * Use this to change the `aria-label` for the \"Cancel\" button.\r\n       *\r\n       * @default ''\r\n       */\r\n      cancelButtonAriaLabel?: string\r\n  \r\n      /**\r\n       * Whether to apply the default SweetAlert2 styling to buttons.\r\n       * If you want to use your own classes (e.g. Bootstrap classes) set this parameter to `false`.\r\n       *\r\n       * @default true\r\n       */\r\n      buttonsStyling?: boolean\r\n  \r\n      /**\r\n       * Set to `true` if you want to invert default buttons positions.\r\n       *\r\n       * @default false\r\n       */\r\n      reverseButtons?: boolean\r\n  \r\n      /**\r\n       * Set to `false` if you want to focus the first element in tab order instead of the \"Confirm\" button by default.\r\n       *\r\n       * @default true\r\n       */\r\n      focusConfirm?: boolean\r\n  \r\n      /**\r\n       * Set to `true` if you want to focus the \"Deny\" button by default.\r\n       *\r\n       * @default false\r\n       */\r\n      focusDeny?: boolean\r\n  \r\n      /**\r\n       * Set to `true` if you want to focus the \"Cancel\" button by default.\r\n       *\r\n       * @default false\r\n       */\r\n      focusCancel?: boolean\r\n  \r\n      /**\r\n       * Set to `false` if you don't want to return the focus to the element that invoked the modal\r\n       * after the modal is closed.\r\n       *\r\n       * @default true\r\n       */\r\n      returnFocus?: boolean\r\n  \r\n      /**\r\n       * Set to `true` to show close button.\r\n       *\r\n       * @default false\r\n       */\r\n      showCloseButton?: boolean\r\n  \r\n      /**\r\n       * Use this to change the HTML content of the close button.\r\n       *\r\n       * @default '&times;'\r\n       */\r\n      closeButtonHtml?: string\r\n  \r\n      /**\r\n       * Use this to change the `aria-label` for the close button.\r\n       *\r\n       * @default 'Close this dialog'\r\n       */\r\n      closeButtonAriaLabel?: string\r\n  \r\n      /**\r\n       * Use this to change the HTML content of the loader.\r\n       *\r\n       * @default ''\r\n       */\r\n      loaderHtml?: string\r\n  \r\n      /**\r\n       * Set to `true` to disable buttons and show the loader instead of the Confirm button.\r\n       * Use it in combination with the `preConfirm` parameter.\r\n       *\r\n       * @default false\r\n       */\r\n      showLoaderOnConfirm?: boolean\r\n  \r\n      /**\r\n       * Set to `true` to disable buttons and show the loader instead of the Deny button.\r\n       * Use it in combination with the `preDeny` parameter.\r\n       *\r\n       * @default false\r\n       */\r\n      showLoaderOnDeny?: boolean\r\n  \r\n      /**\r\n       * Function to execute before confirming, may be async (Promise-returning) or sync.\r\n       * Returned (or resolved) value can be:\r\n       *  - `false` to prevent a popup from closing\r\n       *  - anything else to pass that value as the `result.value` of `Swal.fire()`\r\n       *  - `undefined` to keep the default `result.value`\r\n       *\r\n       * Example:\r\n       * ```\r\n       * Swal.fire({\r\n       *   title: 'Multiple inputs',\r\n       *   html:\r\n       *     '<input id=\"swal-input1\" class=\"swal2-input\">' +\r\n       *     '<input id=\"swal-input2\" class=\"swal2-input\">',\r\n       *   focusConfirm: false,\r\n       *   preConfirm: () => [\r\n       *     document.querySelector('#swal-input1').value,\r\n       *     document.querySelector('#swal-input2').value\r\n       *   ]\r\n       * }).then(result => Swal.fire(JSON.stringify(result));\r\n       * ```\r\n       *\r\n       * @default undefined\r\n       */\r\n      preConfirm?(inputValue: PreConfirmCallbackValue): PreConfirmResult\r\n  \r\n      /**\r\n       * Function to execute before denying, may be async (Promise-returning) or sync.\r\n       * Returned (or resolved) value can be:\r\n       *  - `false` to prevent a popup from closing\r\n       *  - anything else to pass that value as the `result.value` of `Swal.fire()`\r\n       *  - `undefined` to keep the default `result.value`\r\n       *\r\n       * @default undefined\r\n       */\r\n      preDeny?(value: any): SyncOrAsync<any | void>\r\n  \r\n      /**\r\n       * Add an image to the popup. Should contain a string with the path or URL to the image.\r\n       *\r\n       * @default undefined\r\n       */\r\n      imageUrl?: string\r\n  \r\n      /**\r\n       * If imageUrl is set, you can specify imageWidth to describes image width.\r\n       *\r\n       * @default undefined\r\n       */\r\n      imageWidth?: number | string\r\n  \r\n      /**\r\n       * If imageUrl is set, you can specify imageHeight to describes image height.\r\n       *\r\n       * @default undefined\r\n       */\r\n      imageHeight?: number | string\r\n  \r\n      /**\r\n       * An alternative text for the custom image icon.\r\n       *\r\n       * @default ''\r\n       */\r\n      imageAlt?: string\r\n  \r\n      /**\r\n       * Input field label.\r\n       *\r\n       * @default ''\r\n       */\r\n      inputLabel?: string\r\n  \r\n      /**\r\n       * Input field placeholder.\r\n       *\r\n       * @default ''\r\n       */\r\n      inputPlaceholder?: string\r\n  \r\n      /**\r\n       * Input field initial value.\r\n       *\r\n       * @default ''\r\n       */\r\n      inputValue?: SyncOrAsync<string | number | boolean>\r\n  \r\n      /**\r\n       * If the `input` parameter is set to `'select'` or `'radio'`, you can provide options.\r\n       * Object keys will represent options values, object values will represent options text values.\r\n       *\r\n       * @default {}\r\n       */\r\n      inputOptions?: SyncOrAsync<ReadonlyMap<string, string> | Record<string, any>>\r\n  \r\n      /**\r\n       * Automatically remove whitespaces from both ends of a result string.\r\n       * Set this parameter to `false` to disable auto-trimming.\r\n       *\r\n       * @default true\r\n       */\r\n      inputAutoTrim?: boolean\r\n  \r\n      /**\r\n       * HTML input attributes (e.g. `min`, `max`, `step`, `accept`), that are added to the input field.\r\n       *\r\n       * Example:\r\n       * ```\r\n       * Swal.fire({\r\n       *   title: 'Select a file',\r\n       *   input: 'file',\r\n       *   inputAttributes: {\r\n       *     accept: 'image/*'\r\n       *   }\r\n       * })\r\n       * ```\r\n       *\r\n       * @default {}\r\n       */\r\n      inputAttributes?: Record<string, string>\r\n  \r\n      /**\r\n       * Validator for input field, may be async (Promise-returning) or sync.\r\n       *\r\n       * Example:\r\n       * ```\r\n       * Swal.fire({\r\n       *   title: 'Select color',\r\n       *   input: 'radio',\r\n       *   inputValidator: result => !result && 'You need to select something!'\r\n       * })\r\n       * ```\r\n       *\r\n       * @default undefined\r\n       */\r\n      inputValidator?(inputValue: string): SyncOrAsync<string | null>\r\n  \r\n      /**\r\n       * If you want to return the input value as `result.value` when denying the popup, set to `true`.\r\n       * Otherwise, the denying will set `result.value` to `false`.\r\n       *\r\n       * @default false\r\n       */\r\n      returnInputValueOnDeny?: boolean\r\n  \r\n      /**\r\n       * A custom validation message for default validators (email, url).\r\n       *\r\n       * Example:\r\n       * ```\r\n       * Swal.fire({\r\n       *   input: 'email',\r\n       *   validationMessage: 'Adresse e-mail invalide'\r\n       * })\r\n       * ```\r\n       *\r\n       * @default undefined\r\n       */\r\n      validationMessage?: string\r\n  \r\n      /**\r\n       * Progress steps, useful for popup queues.\r\n       *\r\n       * @default []\r\n       */\r\n      progressSteps?: readonly string[]\r\n  \r\n      /**\r\n       * Current active progress step.\r\n       *\r\n       * @default undefined\r\n       */\r\n      currentProgressStep?: number\r\n  \r\n      /**\r\n       * Distance between progress steps.\r\n       *\r\n       * @default undefined\r\n       */\r\n      progressStepsDistance?: number | string\r\n  \r\n      /**\r\n       * Popup lifecycle hook. Synchronously runs before the popup is shown on screen.\r\n       *\r\n       * @default undefined\r\n       * @param popup The popup DOM element.\r\n       */\r\n      willOpen?(popup: HTMLElement): void\r\n  \r\n      /**\r\n       * Popup lifecycle hook. Asynchronously runs after the popup has been shown on screen.\r\n       *\r\n       * @default undefined\r\n       * @param popup The popup DOM element.\r\n       */\r\n      didOpen?(popup: HTMLElement): void\r\n  \r\n      /**\r\n       * Popup lifecycle hook. Synchronously runs after the popup DOM has been updated (ie. just before the popup is\r\n       * repainted on the screen).\r\n       * Typically, this will happen after `Swal.fire()` or `Swal.update()`.\r\n       * If you want to perform changes in the popup's DOM, that survive `Swal.update()`, prefer `didRender` over\r\n       * `willOpen`.\r\n       *\r\n       * @default undefined\r\n       * @param popup The popup DOM element.\r\n       */\r\n      didRender?(popup: HTMLElement): void\r\n  \r\n      /**\r\n       * Popup lifecycle hook. Synchronously runs when the popup closes by user interaction (and not due to another popup\r\n       * being fired).\r\n       *\r\n       * @default undefined\r\n       * @param popup The popup DOM element.\r\n       */\r\n      willClose?(popup: HTMLElement): void\r\n  \r\n      /**\r\n       * Popup lifecycle hook. Asynchronously runs after the popup has been disposed by user interaction (and not due to\r\n       * another popup being fired).\r\n       *\r\n       * @default undefined\r\n       */\r\n      didClose?(): void\r\n  \r\n      /**\r\n       * Popup lifecycle hook. Synchronously runs after popup has been destroyed either by user interaction or by another\r\n       * popup.\r\n       * If you have cleanup operations that you need to reliably execute each time a popup is closed, prefer\r\n       * `didDestroy` over `didClose`.\r\n       *\r\n       * @default undefined\r\n       */\r\n      didDestroy?(): void\r\n  \r\n      /**\r\n       * Set to `false` to disable body padding adjustment when scrollbar is present.\r\n       *\r\n       * @default true\r\n       */\r\n      scrollbarPadding?: boolean\r\n    }\r\n  \r\n    export default Swal\r\n  }\r\n  \r\n  declare module 'sweetalert2/*/sweetalert2.js' {\r\n    export * from 'sweetalert2'\r\n    // \"export *\" does not matches the default export, so do it explicitly.\r\n    export { default } from 'sweetalert2' // eslint-disable-line\r\n  }\r\n  \r\n  declare module 'sweetalert2/*/sweetalert2.all.js' {\r\n    export * from 'sweetalert2'\r\n    // \"export *\" does not matches the default export, so do it explicitly.\r\n    export { default } from 'sweetalert2' // eslint-disable-line\r\n  }\r\n  \r\n  /**\r\n   * These interfaces aren't provided by SweetAlert2, but its definitions use them.\r\n   * They will be merged with 'true' definitions.\r\n   */\r\n  \r\n  interface JQuery {}"
        }
    ]
}